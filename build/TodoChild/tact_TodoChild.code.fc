#pragma version =0.4.3;
#pragma allow-post-modification;
#pragma compute-asm-ltr;

#include "tact_TodoChild.headers.fc";
#include "tact_TodoChild.stdlib.fc";
#include "tact_TodoChild.constants.fc";
#include "tact_TodoChild.storage.fc";

;;
;; Contract TodoChild functions
;;

(slice, int, slice, int) $TodoChild$_contract_init(slice $parent, int $seqno) impure inline_ref {
    var (($self'parent, $self'seqno, $self'task, $self'completed)) = (null(), null(), __gen_slice_string_96a296d224f285c67bee93c30f8a309157f0daa35dc5b87e410b78630a09cfc7(), false);
    $self'parent = $parent;
    $self'seqno = $seqno;
    return ($self'parent, $self'seqno, $self'task, $self'completed);
}

((slice, int, slice, int), (slice, int)) $TodoChild$_fun_details((slice, int, slice, int) $self) impure inline_ref {
    var (($self'parent, $self'seqno, $self'task, $self'completed)) = $self;
    return (($self'parent, $self'seqno, $self'task, $self'completed), $TodoDetails$_constructor_task_completed($self'task, $self'completed));
}

;;
;; Receivers of a Contract TodoChild
;;

(((slice, int, slice, int)), ()) $TodoChild$_internal_binary_InternalSetTask((slice, int, slice, int) $self, (slice) $msg) impure inline {
    var ($self'parent, $self'seqno, $self'task, $self'completed) = $self;
    var ($msg'task) = $msg;
    throw_unless(1040, ( __tact_slice_eq_bits($self'parent, __tact_context_get_sender()) ));
    $self'task = $msg'task;
    return (($self'parent, $self'seqno, $self'task, $self'completed), ());
}

(((slice, int, slice, int)), ()) $TodoChild$_internal_binary_InternalComplete((slice, int, slice, int) $self, (slice) $msg) impure inline {
    var ($self'parent, $self'seqno, $self'task, $self'completed) = $self;
    var ($msg'excess) = $msg;
    throw_unless(1040, ( __tact_slice_eq_bits($self'parent, __tact_context_get_sender()) ));
    $self'completed = true;
    $global_send($SendParameters$_constructor_to_value_mode($msg'excess, 0, (64 + 2)));
    return (($self'parent, $self'seqno, $self'task, $self'completed), ());
}

(((slice, int, slice, int)), ()) $TodoChild$_internal_binary_Deploy((slice, int, slice, int) $self, (int) $deploy) impure inline {
    var ($self'parent, $self'seqno, $self'task, $self'completed) = $self;
    var ($deploy'queryId) = $deploy;
    ($self'parent, $self'seqno, $self'task, $self'completed)~$TodoChild$_fun_notify($DeployOk$_store_cell($DeployOk$_constructor_queryId($deploy'queryId)));
    return (($self'parent, $self'seqno, $self'task, $self'completed), ());
}

;;
;; Get methods of a Contract TodoChild
;;

_ %details() method_id(118890) {
    var self = $TodoChild$_contract_load();
    var res = self~$TodoChild$_fun_details();
    return $TodoDetails$_to_external(res);
}

_ supported_interfaces() method_id {
    return (
        "org.ton.introspection.v0"H >> 128,
        "org.ton.abi.ipfs.v0"H >> 128,
        "org.ton.deploy.lazy.v0"H >> 128,
        "org.ton.chain.workchain.v0"H >> 128
    );
}

_ get_abi_ipfs() method_id {
    return "ipfs://QmUnfxApEu5sXHzMyFrkmTZeJGyzSLqjdvFE9ASf8iEYRc";
}

_ lazy_deployment_completed() method_id {
    return get_data().begin_parse().load_int(1);
}

;;
;; Routing of a Contract TodoChild
;;

((slice, int, slice, int), int) $TodoChild$_contract_router_internal((slice, int, slice, int) self, int msg_bounced, slice in_msg) impure inline_ref {
    ;; Handle bounced messages
    if (msg_bounced) {
        return (self, true);
    }
    
    ;; Parse incoming message
    int op = 0;
    if (slice_bits(in_msg) >= 32) {
        op = in_msg.preload_uint(32);
    }
    
    
    ;; Receive InternalSetTask message
    if (op == 3152733790) {
        var msg = in_msg~$InternalSetTask$_load();
        self~$TodoChild$_internal_binary_InternalSetTask(msg);
        return (self, true);
    }
    
    ;; Receive InternalComplete message
    if (op == 3472919628) {
        var msg = in_msg~$InternalComplete$_load();
        self~$TodoChild$_internal_binary_InternalComplete(msg);
        return (self, true);
    }
    
    ;; Receive Deploy message
    if (op == 2490013878) {
        var msg = in_msg~$Deploy$_load();
        self~$TodoChild$_internal_binary_Deploy(msg);
        return (self, true);
    }
    
    return (self, false);
}

() recv_internal(int msg_value, cell in_msg_cell, slice in_msg) impure {
    
    ;; Context
    var cs = in_msg_cell.begin_parse();
    var msg_flags = cs~load_uint(4);
    var msg_bounced = -(msg_flags & 1);
    slice msg_sender_addr = __tact_verify_address(cs~load_msg_addr());
    __tact_context = (msg_bounced, msg_sender_addr, msg_value, cs);
    __tact_context_sender = msg_sender_addr;
    
    ;; Load contract data
    var self = $TodoChild$_contract_load();
    
    ;; Handle operation
    int handled = self~$TodoChild$_contract_router_internal(msg_bounced, in_msg);
    
    ;; Throw if not handled
    throw_unless(130, handled);
    
    ;; Persist state
    $TodoChild$_contract_store(self);
}
